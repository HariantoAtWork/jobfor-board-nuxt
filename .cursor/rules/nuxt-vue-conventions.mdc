---
globs: *.vue,*.ts,*.js
description: Nuxt 4 and Vue 3 development conventions
---

# Nuxt 4 & Vue 3 Development Conventions

## Vue Component Structure

### Script Setup Syntax
Always use `<script setup>` with TypeScript:

```vue
<script setup lang="ts">
// Component logic here
import { ref, computed } from 'vue'

const props = defineProps<{
  title: string
  isActive?: boolean
}>()

const emit = defineEmits<{
  update: [value: string]
  close: []
}>()
</script>
```

### Template Conventions
- Use **kebab-case** for component names in templates
- Use **PascalCase** for component file names
- Prefer **Tailwind CSS** classes for styling
- Use **semantic HTML** elements

### Composition API Best Practices
- Use `ref()` for reactive primitives
- Use `reactive()` for objects
- Use `computed()` for derived state
- Use `watch()` and `watchEffect()` for side effects
- Leverage **Nuxt auto-imports** (no need to import `ref`, `computed`, etc.)

## File Naming Conventions
- **Components**: PascalCase (`BoardCard.vue`, `UserProfile.vue`)
- **Composables**: camelCase with `use` prefix (`useBoard.ts`, `useAuth.ts`)
- **Pages**: kebab-case (`user-profile.vue`, `job-details.vue`)
- **Types**: PascalCase interfaces (`IBoard`, `ICard`)

## Import/Export Rules
- Always use **ESM syntax**: `import`/`export`
- Never use `require()` or `module.exports`
- Use **named exports** for utilities and composables
- Use **default exports** for Vue components

## TypeScript Conventions
- Define interfaces in [app/types/index.ts](mdc:app/types/index.ts)
- Use **PascalCase** for interfaces (`IBoard`, `ICard`)
- Use **camelCase** for properties and methods
- Always type component props and emits